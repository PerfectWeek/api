{
	"info": {
		"_postman_id": "a344825d-68a9-4514-93d7-b8c637b4948a",
		"name": "PW",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[/] Home Page",
			"item": [
				{
					"name": "GET / | Check returned value",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78834bcb-8d16-405e-9e42-b47f8702969e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Perfect Week API du swag\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								""
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/users] User Features",
			"item": [
				{
					"name": "GET /users/mortimr | Get user while not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd24842e-7a6f-4872-b344-985f5a275b9c",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"You need to be authenticated to perform this action\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62d02529-d221-425b-847a-3e7877db17fc",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Invalid fields in User\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@invalid",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e07be596-fba2-4a63-8f9a-3d711e913b9b",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Password must be at least 8 characters long\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user without pseudo",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd48cf57-a225-4d23-8b2e-e2f753a328be",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user without email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd48cf57-a225-4d23-8b2e-e2f753a328be",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "pseudo",
									"type": "text"
								},
								{
									"key": "password",
									"value": "ANicePassword42",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user without password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd48cf57-a225-4d23-8b2e-e2f753a328be",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8dbd60c6-d553-448d-8432-2598cca18422",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"A link has been sent\");",
									"    pm.expect(jsonData.link).to.include(\"http\");",
									"    pm.globals.set(\"mortimr_link\", jsonData.link);",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/validate-email | Validate email for user mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1e95d3-a2f4-40bb-9cf4-079226c91704",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User has been successfully created\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mortimr_link}}",
							"host": [
								"{{mortimr_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In as new account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3db4e6a3-70b7-4956-a753-5ed15d96dfcf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/mortimr | Get infos of existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adc10d4f-eccb-42e3-8405-6e1619296173",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"OK\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/idlof | Get infos of unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ca4b68f-8cfb-4a17-a065-e922ee7d404a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/idloft",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"idloft"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/mortimr | Try to edit with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "347e597e-c8b0-431e-899f-0f51110dff3a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Invalid fields in User\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@invalid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/mortimr | Edit pseudo and email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9068fc95-3a5a-47ac-bdf0-e9c1ca9c1fb5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User updated\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"iulian\");",
									"    pm.expect(jsonData.user.email).to.eql(\"iulian@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "iulian",
									"type": "text"
								},
								{
									"key": "email",
									"value": "iulian@fake.com",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /users/idloft | Try to edit unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5237bbd0-fc51-4c51-9842-b833be946722",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Action not allowed\");",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@invalid",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/idloft",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"idloft"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/iulian | Get infos of existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a30172d9-da00-41d7-9e28-73803984edde",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"OK\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"iulian\");",
									"    pm.expect(jsonData.user.email).to.eql(\"iulian@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/iulian",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"iulian"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/mortimr | Get infos of previously existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0de0f08c-04e3-4e10-bb86-d2cd9d33a0b7",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /users/idloft | Delete unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "924441f6-a30c-4f14-9d71-8ee30df91794",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Action not allowed\");",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/idloft",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"idloft"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /users/iulian | Delete self",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76c739ea-800c-47a7-9383-3125217c4058",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User deleted\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/iulian",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"iulian"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/auth/login]",
			"item": [
				{
					"name": "POST /users | Create new user mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ffa5ba0f-5191-4953-80d9-61c40c1ba4a9",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.globals.set(\"mortimr_link\", jsonData.link);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/validate-email | Validate email for user mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1e95d3-a2f4-40bb-9cf4-079226c91704",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{mortimr_link}}",
							"host": [
								"{{mortimr_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user idloft",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69390ce1-77ec-49ff-8a53-8700cbabe11a",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.globals.set(\"idloft_link\", jsonData.link);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "idloft",
									"type": "text"
								},
								{
									"key": "email",
									"value": "idloft@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hohohoho",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/validate-email | Validate email for user idloft",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1e95d3-a2f4-40bb-9cf4-079226c91704",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User has been successfully created\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"idloft\");",
									"    pm.expect(jsonData.user.email).to.eql(\"idloft@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{idloft_link}}",
							"host": [
								"{{idloft_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In with invalid account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "797bab3a-09f7-4b72-a28d-9652a9ef045a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad user or password\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "beubeu@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7bc65ef-9795-45be-b87c-f756160edaa0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad user or password\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hohohoho",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In as mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								],
								"id": "3db4e6a3-70b7-4956-a753-5ed15d96dfcf",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In as idloft",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb01adcf-8b3f-4e4a-80f0-351872d88afc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"idloft\");",
									"    pm.expect(jsonData.user.email).to.eql(\"idloft@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "idloft@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hohohoho",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/groups] Group features",
			"item": [
				{
					"name": "Patrick create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e30d4c44-85a4-4522-91e8-e68c948b7df6",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.globals.set(\"patrick_link\", jsonData.link);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "{{PATRICK_PSEUDO}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{PATRICK_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PATRICK_PASSWORD}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/validate-email | Validate email for user Patrick",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1e95d3-a2f4-40bb-9cf4-079226c91704",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{patrick_link}}",
							"host": [
								"{{patrick_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Benoit Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "866ec95e-9b24-4843-a52c-cbceaf91e01e",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.globals.set(\"benoit_link\", jsonData.link);",
									"});",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "{{BENOIT_PSEUDO}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{BENOIT_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{BENOIT_PASSWORD}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/validate-email | Validate email for user benoit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1e95d3-a2f4-40bb-9cf4-079226c91704",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{benoit_link}}",
							"host": [
								"{{benoit_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Intruder Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7964990e-5589-4195-ba35-9b2564f599d1",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.globals.set(\"intruder_link\", jsonData.link);",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "{{INTRUDER_PSEUDO}}",
									"type": "text"
								},
								{
									"key": "email",
									"value": "{{INTRUDER_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{INTRUDER_PASSWORD}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /auth/validate-email | Validate email for user intruder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7c1e95d3-a2f4-40bb-9cf4-079226c91704",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "{{intruder_link}}",
							"host": [
								"{{intruder_link}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patrick Log In",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3302207a-3670-49d2-9ccb-926f3cf368ef",
								"exec": [
									"pm.test(\"Get token\", function () {",
									"    pm.response.to.have.status(200);",
									"    const body = pm.response.json();",
									"    pm.globals.set(\"PATRICK_TOKEN\", body.access_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{PATRICK_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{PATRICK_PASSWORD}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Benoit Log In",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1d4d1aa9-9d95-499c-a14d-aba87cab5d2b",
								"exec": [
									"pm.test(\"Get token\", function () {",
									"    pm.response.to.have.status(200);",
									"    const body = pm.response.json();",
									"    pm.globals.set(\"BENOIT_TOKEN\", body.access_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{BENOIT_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{BENOIT_PASSWORD}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Intruder Log In",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a602c640-b986-4932-92a1-132814e281e7",
								"exec": [
									"pm.test(\"Get token\", function () {",
									"    pm.response.to.have.status(200);",
									"    const body = pm.response.json();",
									"    pm.globals.set(\"INTRUDER_TOKEN\", body.access_token);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "{{INTRUDER_EMAIL}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{INTRUDER_PASSWORD}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Fail] Group create without being logged",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a9c89997-04ef-46c2-be65-1c02d7bcbd43",
								"exec": [
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});",
									"",
									"pm.test(\"Message is Unauthorized\", function () {",
									"    const body = pm.response.json();",
									"    pm.expect(body.message).to.equal(\"You need to be authenticated to perform this action\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "fake",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "[Fail] Create group without fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9f6cdba0-dfd7-4266-900a-5ec869f78cba",
								"exec": [
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									"pm.test(\"Message is Bad Request\", function () {",
									"    const body = pm.response.json();",
									"    pm.expect(body.message).to.equal(\"Bad request\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/json",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PB Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e7aa7e-a174-42b8-af8d-271aba2d349e",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Group correctly created\", function () {",
									"    pm.expect(body.message).to.equal(\"Group created\");",
									"});",
									"",
									"pm.test(\"Group name is correct\", function () {",
									"    const groupExpectedName = pm.environment.get(\"GROUP_BENOIT_PATRICK_NAME\");",
									"    pm.expect(group.name).to.equal(groupExpectedName);",
									"});",
									"",
									"pm.test(\"Group description is correct\", function () {",
									"   const expectedDescription = \"Group PB description\";",
									"   pm.expect(group.description).to.equal(expectedDescription);",
									"});",
									"",
									"pm.test(\"Group contains 2 members\", function () {",
									"    const expectedCount = 2;",
									"    pm.expect(group.nb_members).to.equal(expectedCount);",
									"});",
									"",
									"pm.test(\"Group has calendar_id\", function () {",
									"    pm.expect(group.description).to.not.equal(undefined);",
									"});",
									"",
									"pm.globals.set(\"GROUP_PB_ID\", body.group.id);",
									"pm.globals.set(\"GROUP_PB_CALENDAR_ID\", body.group.calendar_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{GROUP_BENOIT_PATRICK_NAME}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Group PB description",
									"type": "text"
								},
								{
									"key": "members[0]",
									"value": "{{PATRICK_PSEUDO}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Benoit Get Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e7aa7e-a174-42b8-af8d-271aba2d349e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Message is OK\", function () {",
									"    pm.expect(body.message).to.equal(\"OK\"); ",
									"});",
									"",
									"pm.test(\"Group list contains 1 group\", function () {",
									"    pm.expect(body.groups.length).to.equal(1);",
									"});",
									"",
									"pm.test(\"Group list contains GROUP_BENOIT_PATRICK\", function () {",
									"    const group = body.groups[0];",
									"",
									"    const groupExpectedName = pm.environment.get(\"GROUP_BENOIT_PATRICK_NAME\");",
									"    const groupExpectedId = pm.globals.get(\"GROUP_PB_ID\");",
									"    const groupExpectedMemberCount = 2;",
									"",
									"    pm.expect(group.name).to.equal(groupExpectedName);",
									"    pm.expect(group.id).to.equal(groupExpectedId);",
									"    pm.expect(group.nb_members).to.equal(groupExpectedMemberCount);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{BENOIT_PSEUDO}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{BENOIT_PSEUDO}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Intruder Get Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e7aa7e-a174-42b8-af8d-271aba2d349e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Message is OK\", function () {",
									"    pm.expect(body.message).to.equal(\"OK\"); ",
									"});",
									"",
									"pm.test(\"Group list contains 0 group\", function () {",
									"    pm.expect(body.groups.length).to.equal(0);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{INTRUDER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{INTRUDER_PSEUDO}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{INTRUDER_PSEUDO}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PBI Create",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0d794a9c-83bc-45bd-bfed-ed75bb8e4b64",
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Group correctly created\", function () {",
									"    pm.expect(body.message).to.equal(\"Group created\");",
									"});",
									"",
									"pm.test(\"Group name is correct\", function () {",
									"    const groupExpectedName = pm.environment.get(\"GROUP_BENOIT_PATRICK_INTRUDER_NAME\");",
									"    pm.expect(group.name).to.equal(groupExpectedName);",
									"});",
									"",
									"pm.test(\"Group description is correct\", function () {",
									"    const groupExpectedDescription = \"Nice group PBI\";",
									"    pm.expect(group.description).to.equal(groupExpectedDescription);",
									"});",
									"",
									"pm.test(\"Group contains 3 members\", function () {",
									"    const expectedCount = 3;",
									"    pm.expect(group.nb_members).to.equal(expectedCount);",
									"});",
									"",
									"pm.globals.set(\"GROUP_PBI_ID\", group.id);",
									"pm.globals.set(\"GROUP_PBI_CALENDAR_ID\", group.calendar_id);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "{{GROUP_BENOIT_PATRICK_INTRUDER_NAME}}",
									"type": "text"
								},
								{
									"key": "members[0]",
									"value": "{{PATRICK_PSEUDO}}",
									"type": "text"
								},
								{
									"key": "members[1]",
									"value": "{{BENOIT_PSEUDO}}",
									"type": "text"
								},
								{
									"key": "members[2]",
									"value": "{{INTRUDER_PSEUDO}}",
									"type": "text"
								},
								{
									"key": "description",
									"value": "Nice group PBI",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Benoit Get Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e7aa7e-a174-42b8-af8d-271aba2d349e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Message is OK\", function () {",
									"    pm.expect(body.message).to.equal(\"OK\"); ",
									"});",
									"",
									"pm.test(\"Group list contains 2 groups\", function () {",
									"    pm.expect(body.groups.length).to.equal(2);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{BENOIT_PSEUDO}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{BENOIT_PSEUDO}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Intruder Get Groups",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f3e7aa7e-a174-42b8-af8d-271aba2d349e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Message is OK\", function () {",
									"    pm.expect(body.message).to.equal(\"OK\"); ",
									"});",
									"",
									"pm.test(\"Group list contains 1 group\", function () {",
									"    pm.expect(body.groups.length).to.equal(1);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{INTRUDER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{INTRUDER_PSEUDO}}/groups",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{INTRUDER_PSEUDO}}",
								"groups"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PB Get by Benoit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf73e664-1967-41e3-8505-b6fe05a4afb5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const body = pm.response.json();",
									"const group = body.group;",
									"",
									"pm.test(\"Group name is correct\", function () {",
									"    const groupExpectedName = pm.environment.get(\"GROUP_BENOIT_PATRICK_NAME\");",
									"    pm.expect(group.name).to.equal(groupExpectedName);",
									"});",
									"",
									"pm.test(\"Group description is correct\", function () {",
									"    const groupExpectedDescription = \"Group PB description\";",
									"    pm.expect(group.description).to.equal(groupExpectedDescription);",
									"});",
									"",
									"pm.test(\"Group contains 2 members\", function () {",
									"    const expectedCount = 2;",
									"    pm.expect(group.nb_members).to.equal(expectedCount);",
									"});",
									"",
									"pm.test(\"Calendar ID is correct\", function () {",
									"    const expectedId = pm.globals.get(\"GROUP_PB_CALENDAR_ID\");",
									"    pm.expect(group.calendar_id).to.equal(expectedId);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups/{{GROUP_PB_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups",
								"{{GROUP_PB_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PB Get by Intruder",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a6ed8676-bc2d-4012-8bae-81c3d9f7b207",
								"exec": [
									"pm.test(\"Code status is 403\", function () {",
									"    pm.expect(pm.response.code).to.equal(403);",
									"});",
									"",
									"const body = pm.response.json();",
									"",
									"pm.test(\"Error message is correct\", function() {",
									"    pm.expect(body.message).to.equal(\"Group not accessible\");",
									"})",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{INTRUDER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups/{{GROUP_PB_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups",
								"{{GROUP_PB_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Patrick Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4bfeed6d-6a35-47a7-9db6-68e106c4f6fb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{PATRICK_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{PATRICK_PSEUDO}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{PATRICK_PSEUDO}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PB Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bae41c8-5ce1-4382-8c59-034f5a203268",
								"exec": [
									"pm.test(\"Status Code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Deletion message is OK\", function () {",
									"    const body = pm.response.json();",
									"    pm.expect(body.message).to.equal(\"Group successfully deleted\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups/{{GROUP_PB_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups",
								"{{GROUP_PB_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PB Get by Benoit",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf73e664-1967-41e3-8505-b6fe05a4afb5",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"const body = pm.response.json();",
									"",
									"pm.test(\"Group message is unauthorized\", function () {",
									"    pm.expect(body.message).to.equal(\"Group not accessible\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups/{{GROUP_PB_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups",
								"{{GROUP_PB_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Intruder Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "64798071-f5fe-4055-be83-15ea3ba20b45",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{INTRUDER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{INTRUDER_PSEUDO}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{INTRUDER_PSEUDO}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Group PBI Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d272baef-fa51-4b99-82d7-22b4db8329b2",
								"exec": [
									"pm.test(\"Status Code is 200\", function () {",
									"    pm.expect(pm.response.code).to.equal(200);",
									"});",
									"",
									"pm.test(\"Deletion message is OK\", function () {",
									"    const body = pm.response.json();",
									"    pm.expect(body.message).to.equal(\"Group successfully deleted\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/groups/{{GROUP_PBI_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"groups",
								"{{GROUP_PBI_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Benoit Delete",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "121052f0-085d-40a4-a73a-4a52ce0616bb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{BENOIT_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/{{BENOIT_PSEUDO}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"{{BENOIT_PSEUDO}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/calendars] Calendar features",
			"item": [
				{
					"name": "POST /auth/login | Log In as mortirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3db4e6a3-70b7-4956-a753-5ed15d96dfcf",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/mortimr/calendars | Get mortimr's calendar list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c11261f-53f2-4486-a36d-0ed4e8bb4746",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"OK\");",
									"    pm.expect(jsonData.calendars.length).to.eql(1);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr/calendars",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr",
								"calendars"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /calendars | Create calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4016d30c-0156-4301-b0a9-8a75503231f7",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Calendar created\");",
									"    pm.expect(jsonData.calendar.name).to.eql(\"holidays\");",
									"    pm.globals.set(\"CALENDAR_ID\", jsonData.calendar.id);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "holidays",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /calendars | Create new Calendar empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3bd59d96-4c2a-45e1-a956-86eb05fe232d",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad request\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /users/mortimr/calendars | Get mortimr's calendar list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9c11261f-53f2-4486-a36d-0ed4e8bb4746",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"OK\");",
									"    pm.expect(jsonData.calendars.length).to.eql(2);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr/calendars",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr",
								"calendars"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /calendars/calendar_id | Get calendar Info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3676737e-971a-4452-a58b-57e3ec6d8a7a",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"OK\");",
									"    pm.expect(jsonData.calendar.name).to.eql(\"holidays\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}"
							]
						},
						"description": "Get info, without events"
					},
					"response": []
				},
				{
					"name": "GET /calendars/calendar_id | Get unknown calendar info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "59c16090-1a6e-49ee-9f78-c3946144b0b5",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Test body value\", function () {",
									"    pm.expect(jsonData.message).to.eql(\"Calendar not accessible\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/12",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"12"
							]
						},
						"description": "Get info, without events"
					},
					"response": []
				},
				{
					"name": "PUT /calendars/calendar_id | Edit calendar info",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73e58604-0d9d-4695-a0be-206d9151034a",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Calendar successfully edited\");",
									"    pm.expect(jsonData.calendar.name).to.eql(\"Refacto calendar\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Refacto calendar",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /calendars/calendar_id | Get calendar removed Calendar Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3676737e-971a-4452-a58b-57e3ec6d8a7a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Test body value\", function () {",
									"    pm.expect(jsonData.message).to.include(\"OK\");",
									"    pm.expect(jsonData.calendar.name).to.eql(\"Refacto calendar\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}"
							]
						},
						"description": "Get info, without events"
					},
					"response": []
				},
				{
					"name": "PUT /calendars/calendar_id | Edit calendar info unknown calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73e58604-0d9d-4695-a0be-206d9151034a",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Calendar not accessible\");",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Refacto calendar",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"9999"
							]
						}
					},
					"response": []
				},
				{
					"name": "PUT /calendars/calendar_id | Edit calendar info empty name",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "73e58604-0d9d-4695-a0be-206d9151034a",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad request\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "DELETE /calendars/calendar_id | Delete a calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61d965bd-e1e3-432c-a1a1-b0a24c688a22",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Calendar successfully deleted\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /calendars/calendar_id | Get calendar removed Calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3676737e-971a-4452-a58b-57e3ec6d8a7a",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									"",
									"var jsonData = pm.response.json();",
									"",
									"pm.test(\"Test body value\", function () {",
									"    pm.expect(jsonData.message).to.include(\"Calendar not accessible\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}"
							]
						},
						"description": "Get info, without events"
					},
					"response": []
				},
				{
					"name": "DELETE /calendars/calendar_id | Delete a unknown Calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "61d965bd-e1e3-432c-a1a1-b0a24c688a22",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Calendar not accessible\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/9999",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"9999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "[/events] Event features",
			"item": [
				{
					"name": "POST /auth/login | Log In as mortirm",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3db4e6a3-70b7-4956-a753-5ed15d96dfcf",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "email",
									"value": "mortimr@fake.com",
									"type": "text"
								},
								{
									"key": "password",
									"value": "hahahaha",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /calendars | Create calendar",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4016d30c-0156-4301-b0a9-8a75503231f7",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.include(\"Calendar created\");",
									"    pm.expect(jsonData.calendar.name).to.eql(\"holidays\");",
									"    pm.globals.set(\"CALENDAR_ID\", jsonData.calendar.id);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "holidays",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								""
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /calendars/calendar_id/events | Create event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe8eb7f-dec4-4307-bcc1-181e6f422e50",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    var calendar_id = pm.globals.get(\"CALENDAR_ID\"); ",
									"    pm.expect(jsonData.message).to.eql(\"Event created\");",
									"    pm.expect(jsonData.event.name).to.eql(\"Nouvel An\");",
									"    pm.expect(jsonData.event.description).to.eql(\"10, 9, 8, 7, 6, 5, 4, 3, 2, 1, BONNE ANNEEEE\");",
									"    pm.expect(jsonData.event.calendar_id).to.eql(calendar_id);",
									"    pm.expect(jsonData.event.location).to.eql(\"Le pub Universitaire\");",
									"    pm.expect(jsonData.event.start_time).to.eql(\"2018-12-31T20:00:00\");",
									"    pm.expect(jsonData.event.end_time).to.eql(\"2019-01-01T06:00:00\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Nouvel An",
									"type": "text"
								},
								{
									"key": "description",
									"value": "10, 9, 8, 7, 6, 5, 4, 3, 2, 1, BONNE ANNEEEE",
									"type": "text"
								},
								{
									"key": "location",
									"value": "Le pub Universitaire",
									"type": "text"
								},
								{
									"key": "start_time",
									"value": "2018-12-31T20:00:00",
									"type": "text"
								},
								{
									"key": "end_time",
									"value": "2019-01-01T06:00:00",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /calendars/calendar_id/events | Create another event",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe8eb7f-dec4-4307-bcc1-181e6f422e50",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    var calendar_id = pm.globals.get(\"CALENDAR_ID\"); ",
									"    pm.expect(jsonData.message).to.eql(\"Event created\");",
									"    pm.expect(jsonData.event.name).to.eql(\"Nouvel An\");",
									"    pm.expect(jsonData.event.description).to.eql(\"10, 9, 8, 7, 6, 5, 4, 3, 2, 1, BONNE ANNEEEE\");",
									"    pm.expect(jsonData.event.calendar_id).to.eql(calendar_id);",
									"    pm.expect(jsonData.event.location).to.eql(\"Le pub Universitaire\");",
									"    pm.expect(jsonData.event.start_time).to.eql(\"2018-12-31T20:00:00\");",
									"    pm.expect(jsonData.event.end_time).to.eql(\"2019-01-01T06:00:00\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "Nouvel An",
									"type": "text"
								},
								{
									"key": "description",
									"value": "10, 9, 8, 7, 6, 5, 4, 3, 2, 1, BONNE ANNEEEE",
									"type": "text"
								},
								{
									"key": "location",
									"value": "Le pub Universitaire",
									"type": "text"
								},
								{
									"key": "start_time",
									"value": "2018-12-31T20:00:00",
									"type": "text"
								},
								{
									"key": "end_time",
									"value": "2019-01-01T06:00:00",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST /calendars/calendar_id/events | Create event missing field",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe8eb7f-dec4-4307-bcc1-181e6f422e50",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad request\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "name",
									"value": "",
									"type": "text"
								},
								{
									"key": "description",
									"value": "10, 9, 8, 7, 6, 5, 4, 3, 2, 1, BONNE ANNEEEE",
									"type": "text"
								},
								{
									"key": "location",
									"value": "Le pub Universitaire",
									"type": "text"
								},
								{
									"key": "start_time",
									"value": "2018-12-31T20:00:00",
									"type": "text"
								},
								{
									"key": "end_time",
									"value": "2019-01-01T06:00:00",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET /calendars/calendar_id/events | Get calendar's event list",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fe8eb7f-dec4-4307-bcc1-181e6f422e50",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"OK\");",
									"    pm.expect(jsonData.events.length).to.eql(2);",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "raw",
							"raw": ""
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/calendars/{{CALENDAR_ID}}/events",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"calendars",
								"{{CALENDAR_ID}}",
								"events"
							]
						}
					},
					"response": []
				}
			]
		}
	]
}