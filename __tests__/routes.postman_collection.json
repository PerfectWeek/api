{
	"info": {
		"name": "PW",
		"_postman_id": "5802ce0c-0769-8c05-073b-b718112ec8fa",
		"description": "",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "[/] Home Page",
			"description": "",
			"item": [
				{
					"name": "GET / | Check returned value",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.name).to.eql(\"Perfect Week API du swag\");",
									"});",
									"",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"id": "78834bcb-8d16-405e-9e42-b47f8702969e",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "id",
									"type": "text",
									"value": "3"
								},
								{
									"description": "",
									"key": "verified",
									"type": "text",
									"value": "true"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								""
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "[/users] User Features",
			"description": "",
			"item": [
				{
					"name": "GET /users/mortimr | Get user while not authenticated",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"You need to be authenticated to perform this action\");",
									"});",
									"",
									"pm.test(\"Status code is 401\", function () {",
									"    pm.response.to.have.status(401);",
									"});"
								],
								"id": "fd24842e-7a6f-4872-b344-985f5a275b9c",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "id",
									"type": "text",
									"value": "3"
								},
								{
									"description": "",
									"key": "verified",
									"type": "text",
									"value": "true"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Invalid fields in User\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"id": "62d02529-d221-425b-847a-3e7877db17fc",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": "mortimr"
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@invalid"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user with empty password",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Password must be at least 8 characters long\");",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"id": "e07be596-fba2-4a63-8f9a-3d711e913b9b",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": "mortimr"
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user with empty pseudo",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Invalid request\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								],
								"id": "fd48cf57-a225-4d23-8b2e-e2f753a328be",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": ""
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User created\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"id": "ffa5ba0f-5191-4953-80d9-61c40c1ba4a9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": "mortimr"
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In as new account",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								],
								"id": "3db4e6a3-70b7-4956-a753-5ed15d96dfcf",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/mortimr | Get infos of existing user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"OK\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"id": "adc10d4f-eccb-42e3-8405-6e1619296173",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/idlof | Get infos of unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ca4b68f-8cfb-4a17-a065-e922ee7d404a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/idloft",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"idloft"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /users/mortimr | Try to edit with invalid email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "347e597e-c8b0-431e-899f-0f51110dff3a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Invalid fields in User\");",
									"});",
									"",
									"pm.test(\"Status code is 400\", function () {",
									"    pm.response.to.have.status(400);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "mortimr",
									"description": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "mortimr@invalid",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /users/mortimr | Edit pseudo and email",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9068fc95-3a5a-47ac-bdf0-e9c1ca9c1fb5",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User updated\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"iulian\");",
									"    pm.expect(jsonData.user.email).to.eql(\"iulian@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "pseudo",
									"value": "iulian",
									"description": "",
									"type": "text"
								},
								{
									"key": "email",
									"value": "iulian@fake.com",
									"description": "",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "PUT /users/idloft | Try to edit unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5237bbd0-fc51-4c51-9842-b833be946722",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Action forbidden\");",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": "mortimr"
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@invalid"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/idloft",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"idloft"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/iulian | Get infos of existing user copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a30172d9-da00-41d7-9e28-73803984edde",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"OK\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"iulian\");",
									"    pm.expect(jsonData.user.email).to.eql(\"iulian@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/iulian",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"iulian"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "GET /users/mortimr | Get infos of previously existing user copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0de0f08c-04e3-4e10-bb86-d2cd9d33a0b7",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User not found\");",
									"});",
									"",
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/mortimr",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"mortimr"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /users/idloft | Delete unexisting user",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "924441f6-a30c-4f14-9d71-8ee30df91794",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Action not allowed\");",
									"});",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/idloft",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"idloft"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "DELETE /users/iulian | Delete self",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "76c739ea-800c-47a7-9383-3125217c4058",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User deleted\");",
									"});",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								]
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [],
						"body": {},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users/iulian",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users",
								"iulian"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		},
		{
			"name": "[/auth/login]",
			"description": "",
			"item": [
				{
					"name": "POST /users | Create new user mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User created\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								],
								"id": "ffa5ba0f-5191-4953-80d9-61c40c1ba4a9",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": "mortimr"
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /users | Create new user idloft",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69390ce1-77ec-49ff-8a53-8700cbabe11a",
								"type": "text/javascript",
								"exec": [
									"",
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"User created\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"idloft\");",
									"    pm.expect(jsonData.user.email).to.eql(\"idloft@fake.com\");",
									"});",
									"",
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});"
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "pseudo",
									"type": "text",
									"value": "idloft"
								},
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "idloft@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hohohoho"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/users",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"users"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In with invalid account",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "797bab3a-09f7-4b72-a28d-9652a9ef045a",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad user or password\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "beubeu@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b7bc65ef-9795-45be-b87c-f756160edaa0",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Bad user or password\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hohohoho"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In as mortimr",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"mortimr\");",
									"    pm.expect(jsonData.user.email).to.eql(\"mortimr@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								],
								"id": "3db4e6a3-70b7-4956-a753-5ed15d96dfcf",
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "mortimr@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hahahaha"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						},
						"description": ""
					},
					"response": []
				},
				{
					"name": "POST /auth/login | Log In as idloft",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb01adcf-8b3f-4e4a-80f0-351872d88afc",
								"type": "text/javascript",
								"exec": [
									"pm.test(\"Test body value\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.message).to.eql(\"Authentication successful\");",
									"    pm.expect(jsonData.user.pseudo).to.eql(\"idloft\");",
									"    pm.expect(jsonData.user.email).to.eql(\"idloft@fake.com\");",
									"});",
									"",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.globals.set(\"TOKEN\", pm.response.json().access_token);",
									""
								]
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"description": "",
									"key": "email",
									"type": "text",
									"value": "idloft@fake.com"
								},
								{
									"description": "",
									"key": "password",
									"type": "text",
									"value": "hohohoho"
								}
							]
						},
						"url": {
							"raw": "http://localhost:{{TEST_API_PORT}}/auth/login",
							"protocol": "http",
							"host": [
								"localhost"
							],
							"port": "{{TEST_API_PORT}}",
							"path": [
								"auth",
								"login"
							]
						},
						"description": ""
					},
					"response": []
				}
			]
		}
	]
}